#!/usr/bin/perl
# -*- CPERL -*-
# /=======================================================\ #
# |  ifthen.sty - Implementation for LaTeXML              | #
# |                                                       | #
# |=======================================================| #
# | Part of LaTeXML : http://dlmf.nist.gov/LaTeXML/       | #
# | Copyright (c) 2011 Josh Bialkowski                    | #
# | Released under the GNU Public License                 | #
# |=======================================================| #
# | Author: Josh Bialkowski                               | #
# | E-mail: jbiakl@mit.edu                                | #
# \=======================================================/ #

package LaTeXML::Package;

use strict;
use LaTeXML::Package;

our $algoDepth = 1;


RegisterNamespace('algorithm2e','http://dlmf.nist.gov/LaTeXML/packages/algorithm2e');
RelaxNGSchema('algorithm2e','algorithm2e'=>'http://dlmf.nist.gov/LaTeXML/packages/algorithm2e');


NewCounter('algoAlgo', 'document',  idprefix=>'A');
NewCounter('algoLine', 'algoAlgo',  idprefix=>'L', idwithin=>'algoAlgo');

DefMacro('\KwSty{}','\texttt{ \textbf{#1}}');
DefMacro('\While{}{}','\KwSty{while}: #1 \KwSty{do} \algoBeginBlock #2 \algoEndBlock \KwSty{end} \;');
DefMacro('\eIf{}{}','\KwSty{if}: #1 \KwSty{then} \algoBeginBlock #2 \algoEndBlock \KwSty{end} \;');
DefMacro('\KwData{}','\KwSty{Data}: #1 \algoEndLine');
DefMacro('\KwResult{}','\KwSty{Result}: #1 \algoEndLine');

DefConstructor('\algoEndLine',sub{
    my $document = shift;
    my %ref      = RefStepCounter('algoLine');
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
    $document->closeElement("algorithm2e:line");
    $document->openElement("algorithm2e:line");	
}); 

DefConstructor('\algoBeginBlock',sub{
    my $document = shift;
    my %ref      = RefStepCounter('algoLine');
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
    $document->closeElement("algorithm2e:line");

    $algoDepth = $algoDepth + 1;
    $document->openElement("algorithm2e:block");
    $document->addAttribute("depth"=>$algoDepth);
    $document->openElement("algorithm2e:line");
});

DefConstructor('\algoEndBlock',sub{
	my $document = shift;
    my %ref      = RefStepCounter('algoLine');
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
    $document->closeElement("algorithm2e:line");
    $document->closeElement("algorithm2e:block");
    $document->openElement("algorithm2e:line");
});

DefConstructor('\algorithm[]',sub{
	my $document = shift;
    my %ref      = RefStepCounter('algoAlgo');
    $document->openElement("algorithm2e:algorithm");
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
    $document->openElement("algorithm2e:block");
    $document->addAttribute("depth"=>$algoDepth);
    $document->openElement("algorithm2e:line");
},
    beforeDigest=>sub{
    	my $stomach = shift;
    	Let('\algoOldsemicolon','\;');
    	Let('\;','\algoEndLine');
    }    
);

DefConstructor('\endalgorithm',sub{
	my $document = shift;
    my %ref      = RefStepCounter('algoLine');
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
    $document->closeElement("algorithm2e:line");
    $document->closeElement("algorithm2e:block");
    $document->closeElement("algorithm2e:algorithm");	
},
    beforeDigest=>sub{
        my $stomach = shift;
        Let('\;','\algoOldsemicolon');
    }
);


1;
