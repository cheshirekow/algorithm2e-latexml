#!/usr/bin/perl
# -*- CPERL -*-
# /=======================================================\ #
# |  ifthen.sty - Implementation for LaTeXML              | #
# |                                                       | #
# |=======================================================| #
# | Part of LaTeXML : http://dlmf.nist.gov/LaTeXML/       | #
# | Copyright (c) 2011 Josh Bialkowski                    | #
# | Released under the GNU Public License                 | #
# |=======================================================| #
# | Author: Josh Bialkowski                               | #
# | E-mail: jbiakl@mit.edu                                | #
# \=======================================================/ #

package LaTeXML::Package;

use strict;
use LaTeXML::Package;

our $algoDepth = 1;

# registers the "algorithm2e" xml prefix to point to the algorithm2e namespace
RegisterNamespace('algorithm2e','http://dlmf.nist.gov/LaTeXML/packages/algorithm2e');

# load the algorithm2e scheme
RelaxNGSchema('algorithm2e','algorithm2e'=>'http://dlmf.nist.gov/LaTeXML/packages/algorithm2e');

# this is the algorithm counter
NewCounter('algoAlgo', 'document',  idprefix=>'A');

# this is the counter for lines within an algorithm
NewCounter('algoLine', 'algoAlgo',  idprefix=>'L', idwithin=>'algoAlgo');


# these are some simple macro expansions
DefMacro('\KwSty{}',    '\textbf{#1}');
DefMacro('\While{}{}',  '\KwSty{while}: #1 \KwSty{do} \algoBeginBlock #2 \algoEndBlock \KwSty{end} \;');
DefMacro('\eIf{}{}',    '\KwSty{if}: \emph{#1} \KwSty{then} \algoBeginBlock #2 \algoEndBlock \KwSty{end} \;');
DefMacro('\KwData{}',   '\KwSty{Data}: \emph{#1} \algoEndLine');
DefMacro('\KwResult{}', '\KwSty{Result}: \emph{#1} \algoEndLine');






DefConstructor('\algoEndLine',sub{
    my $document = shift;
    algoEndLine($document);
    algoBeginLine($document);
}); 

DefConstructor('\algoBeginBlock',sub{
    my $document = shift;
    algoEndLine($document);
    algoBeginBlock($document);
    algoBeginLine($document);
});

DefConstructor('\algoEndBlock',sub{
	my $document = shift;
	algoCancelLine($document);
	algoEndBlock($document);
	algoBeginLine($document);
});

DefConstructor('\algorithm[]',sub{
	my $document = shift;
	algoBeginEnv($document);
	algoBeginBlock($document);
	algoBeginLine($document);
},
    beforeDigest=>sub{
    	my $stomach = shift;
    	Let('\algoOldsemicolon','\;');
    	Let('\;','\algoEndLine');
    }    
);

DefConstructor('\endalgorithm',sub{
	my $document = shift;
	algoEndLine($document);
	algoEndBlock($document);
	algoEndEnv($document);
},
    beforeDigest=>sub{
        my $stomach = shift;
        Let('\;','\algoOldsemicolon');
    }
);


sub algoBeginEnv
{
    my $document = shift;
    my %ref      = RefStepCounter('algoAlgo');
    $document->openElement("algorithm2e:algorithm");
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
    $algoDepth   = 0;
}

sub algoEndEnv
{
	my $document = shift;
    $document->closeElement("algorithm2e:algorithm");
}

sub algoBeginBlock
{
	my $document = shift;
    $algoDepth = $algoDepth + 1;
    $document->openElement("algorithm2e:block");
    $document->addAttribute("depth"=>$algoDepth);
}

sub algoEndBlock
{
	my $document = shift;
	$document->closeElement("algorithm2e:block");
	$algoDepth = $algoDepth - 1;
}

sub algoBeginLine
{
    my $document = shift;
    my %ref      = RefStepCounter('algoLine');
    $document->openElement("algorithm2e:line");
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
}

sub algoEndLine
{
	my $document = shift;
    $document->closeElement("algorithm2e:line");
}

sub algoCancelLine
{
    my $document = shift;
    my $node = $document->getElement("algorithm2e:line");
    $document->closeElement("algorithm2e:line");
    $node->parentNode->removeChild($node);
}




1;