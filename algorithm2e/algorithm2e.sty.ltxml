#!/usr/bin/perl
# -*- CPERL -*-
# /=======================================================\ #
# |  algorithm2e.sty- implementation for LaTeXML          | #
# |                                                       | #
# |=======================================================| #
# | Copyright (c) 2011 Josh Bialkowski                    | #
# | Released under the GNU Public License                 | #
# |=======================================================| #
# | Author: Josh Bialkowski                               | #
# | E-mail: jbialk@mit.edu                                | #
# \=======================================================/ #

package LaTeXML::Package;

use strict;
use LaTeXML::Package;

our $algoDepth = 1;

our $globalNumbered = 1;        #all algos numbered by default
our $localNumbered;             #this algo numbered
our $singleLineNumberOn;        #this line numbered 
our $singleLineNumberOff;       #this line not numbered

our $currentLineNode;
our $currentCaptionNode;
our $restoreNode;

# registers the "algorithm2e" xml prefix to point to the algorithm2e namespace
# RegisterNamespace('algorithm2e','http://dlmf.nist.gov/LaTeXML/packages/algorithm2e');

# load the latxml scheme
# RelaxNGSchema('LaTeXML','ltx'=>'http://dlmf.nist.gov/LaTeXML');

# this is the algorithm counter
NewCounter('algoAlgo', 'document',  idprefix=>'A');

# this is the counter for blocks within an algorithm
NewCounter('algoBlock', 'algoAlgo', idprefix=>'B', idwithin=>'algoAlgo');

# this is the counter for lines within an algorithm
NewCounter('algoLine', 'algoAlgo',  idprefix=>'L', idwithin=>'algoAlgo');


# these are some simple macro expansions
DefMacro('\KwSty{}',    '\textbf{#1}');
DefMacro('\While{}{}',  '\KwSty{while } \emph{#1} \KwSty{ do} \algoBeginBlock #2 \algoEndBlock \KwSty{end} \;');
DefMacro('\For{}{}',    '\KwSty{for } \emph{#1} \KwSty{ do} \algoBeginBlock #2 \algoEndBlock \KwSty{end} \;');
DefMacro('\If{}{}',     '\KwSty{if } \emph{#1} \KwSty{ then} \algoBeginBlock #2 \algoEndBlock \KwSty{end} \;');
DefMacro('\eIf{}{}{}',  '\KwSty{if } \emph{#1} \KwSty{ then} \algoBeginBlock #2 \algoEndBlock \KwSty{else} \algoBeginBlock #3 \algoEndBlock \KwSty{end} \;');
DefMacro('\KwData{}',   '\algoSingleLineNumberOff \KwSty{Data } {#1} \algoEndLine');
DefMacro('\KwResult{}', '\algoSingleLineNumberOff \KwSty{Result } {#1} \algoEndLine');
DefMacro('\Return{}',   '\algoSingleLineNumberOff \KwSty{Return}: {#1} ');

DefMacro('\algoCaption{}',  '\beginAlgoCaption {#1} \endAlgoCaption');




DefConstructor('\algoEndLine',sub{
    my $document = shift;
    algoEndLine($document);
    algoBeginLine($document);
}); 

DefConstructor('\algoBeginBlock',sub{
    my $document = shift;
    algoEndLine($document);
    algoBeginBlock($document);
    algoBeginLine($document);
});

DefConstructor('\algoEndBlock',sub{
	my $document = shift;
	algoCancelLine($document);
	algoEndBlock($document);
	algoBeginLine($document);
});

DefConstructor('\algorithm[]',sub{
	my $document = shift;
	algoBeginEnv($document);
	algoBeginBlock($document);
	algoBeginLine($document);
	
},
    beforeDigest=>sub{
    	my $stomach = shift;
    	Let('\algoOldSemicolon','\;');
    	Let('\algoOldCaption','\caption');
    	Let('\;','\algoEndLine');
    	Let('\caption','\algoCaption');
    }    
);

DefConstructor('\endalgorithm',sub{
	my $document = shift;
	algoCancelLine($document);
	algoEndBlock($document);
	algoEndEnv($document);
},
    beforeDigest=>sub{
        my $stomach = shift;
        Let('\;','\algoOldsemicolon');
        Let('\caption','\algoOldCaption');
    }
);

DefConstructor('\beginAlgoCaption',sub{
	my $document = shift;
	$restoreNode = $document->getNode;
	$document->setNode($currentCaptionNode);
});

DefConstructor('\endAlgoCaption',sub{
	my $document = shift;
	$document->setNode($restoreNode);
});

DefConstructor('\algoSingleLineNumberOff',sub{$singleLineNumberOff=1;});
DefConstructor('\algoSingleLineNumberOn', sub{$singleLineNumberOn =1;});

sub algoBeginEnv
{
    my $document = shift;
    my %ref      = RefStepCounter('algoAlgo');
    $document->openElement("ltx:float");
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
    $document->addAttribute("class"=>"algorithm2e");
    $document->openElement("ltx:caption");
    $document->addAttribute("class"=>"algorithm2e-caption");
    $currentCaptionNode = $document->getNode;
    $document->closeElement("ltx:caption");
    $algoDepth   = 0;
    
    $localNumbered = $globalNumbered;
    $singleLineNumberOff = 0;
    $singleLineNumberOn  = 0;
}

sub algoEndEnv
{
	my $document = shift;
    $document->closeElement("ltx:float");
}

sub algoBeginBlock
{
	my $document = shift;
	my %ref      = RefStepCounter('algoBlock');
    $algoDepth = $algoDepth + 1;
    $document->openElement("ltx:inline-block");
    $document->addAttribute("depth"=>$algoDepth);
    $document->addAttribute("class"=>"algorithm2e-block");
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
}

sub algoEndBlock
{
	my $document = shift;
	$document->closeElement("ltx:inline-block");
	$algoDepth = $algoDepth - 1;
}

sub algoBeginLine
{
    my $document = shift;
    my %ref      = RefStepCounter('algoLine');
    $currentLineNode = $document->openElement("ltx:p");
    $document->addAttribute("class"=>"algorithm2e-line");
    $document->addAttribute("refnum"=>$ref{'refnum'});
    $document->addAttribute("xml:id"=>$ref{'id'});
}

sub algoEndLine
{
	my $document = shift;
    if($singleLineNumberOn || ($localNumbered && !$singleLineNumberOff) )
    {
    	my %ref = RefStepCounter('algoLine');
	    $currentLineNode->setAttribute("refnum",ToString($ref{'refnum'}));
	    $currentLineNode->setAttribute("xml:id",ToString($ref{'id'}));
    }
    else
    {
    	
    }
    $document->closeElement("ltx:p");
    $singleLineNumberOff = 0;
    $singleLineNumberOn  = 0;
}

sub algoCancelLine
{
    my $document = shift;
    my $node = $document->getElement("ltx:p");
    #$document->closeElement("ltx:p");
    #$node->parentNode->removeChild($node);
}




1;